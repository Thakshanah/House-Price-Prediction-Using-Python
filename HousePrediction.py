# -*- coding: utf-8 -*-
"""finalML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w1ebUgm3kwEVlYYAkxNlLDyj4D46Jl8l

**Code With all the features**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder
import statsmodels.api as sm

# Read the data
data = pd.read_csv("/content/Bengaluru_House_Data.csv")

# Handling missing values
data = data.dropna()

# Define the independent and dependent variables
X = data[['bath', 'total_sqft', 'society', 'size', 'location', 'availability', 'balcony', 'area_type']]
y = data['price']

# Convert categorical variables to numerical using LabelEncoder
label_encoder = LabelEncoder()
X_encoded = X.apply(label_encoder.fit_transform)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.3, random_state=123)

# Perform linear regression
model = LinearRegression()
model.fit(X_train, y_train)

# Get the predicted values for the test set
y_pred = model.predict(X_test)

# Calculate mean squared error (MSE) and R-squared
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("R-squared:", r2)

# Calculate p-values and t-values using statsmodels
X_train = sm.add_constant(X_train)
model_sm = sm.OLS(y_train, X_train)
results = model_sm.fit()
p_values = results.pvalues
t_values = results.tvalues

print("P-values:", p_values)
print("T-values:", t_values)

"""In the above results shows that r2=0.35 and its bit far away from 1. that means models goodness is not enough. Also in the 'availability','area_type','society','balcony' variables P values are much higher and t values are very lower. Therefore we can conclude that variables are less significant for the house price prediction.

**Code with droping unnecessary features.**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# %matplotlib inline
import matplotlib
from sklearn.model_selection import train_test_split
from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import Lasso
from sklearn.tree import DecisionTreeRegressor

matplotlib.rcParams["figure.figsize"] = (20,10)

df1 = pd.read_csv("Bengaluru_House_Data.csv")
df1.shape

#drop the column names which are unnecessary features.
df1.drop(columns=['availability','area_type','society','balcony'],inplace=True)
df1.head()

df1.isnull().sum()

df2=df1.dropna()
df2.isnull().sum()

df2['size'].unique()

df2['BHK'] = df2['size'].apply(lambda x: int(x.split(' ')[0]))
df2.head()

df2['BHK'].unique()

df2[df2.BHK>20]

"""
Check the unique value in total_sqft"""

df2.total_sqft.unique()

def is_float(x):
    try:
        float(x)
    except:
        return False
    return True

df2[~df2['total_sqft'].apply(is_float)].head(10)

def convert_sqft_to_num(x):
    tokens = x.split('-')
    if len(tokens) == 2:
        return (float(tokens[0])+float(tokens[1]))/2
    try:
        return float(x)
    except:
        return None

df3 = df2.copy()
df3.total_sqft = df3.total_sqft.apply(convert_sqft_to_num)
df3 = df3[df3.total_sqft.notnull()]
df3.head()

#df3.loc[30]

df4 = df3.copy()
df4['price_per_sqft'] = df4['price']*100000/df4['total_sqft']
df4.head()

df4_stats = df4['price_per_sqft'].describe()
df4_stats

df4.to_csv("bhp.csv",index=False)

#Strips any leading or trailing whitespaces of the values in location coloumn.
df4.location = df4.location.apply(lambda x: x.strip())
location_stats = df4['location'].value_counts(ascending=False)
location_stats

#Any coloumn that have less than 10 data points should be tagged as "other" location.
#This way num of categories can be reduces by huge ammount.Later on when we do one hot encoding it will help us with
#having fewer dummy coloumns.


location_stats_less_than_10 = location_stats[location_stats<=10]
location_stats_less_than_10

df4.location = df4.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)
len(df4.location.unique())

#Remove outliers by keeping our minimum thresold per BHK to be 300 sqft.
df4[df4.total_sqft/df4.BHK<300].head()

df6 = df4[~(df4.total_sqft/df4.BHK<300)]
df6.shape

df6.price_per_sqft.describe()

def remove_pps_outliers(df):
    df_out = pd.DataFrame()
    for key, subdf in df.groupby('location'):
        m = np.mean(subdf.price_per_sqft)
        st = np.std(subdf.price_per_sqft)
        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]
        df_out = pd.concat([df_out,reduced_df],ignore_index=True)
    return df_out
df7 = remove_pps_outliers(df6)
df7.shape

def plot_scatter_chart(df,location):
    BHK2 = df[(df.location==location) & (df.BHK==2)]
    BHK3 = df[(df.location==location) & (df.BHK==3)]
    matplotlib.rcParams['figure.figsize'] = (15,10)
    plt.scatter(BHK2.total_sqft,BHK2.price,color='blue',label='2 BHK', s=50)
    plt.scatter(BHK3.total_sqft,BHK3.price,marker='+', color='green',label='3 BHK', s=50)
    plt.xlabel("Total Square Feet Area")
    plt.ylabel("Price (Lakh Indian Rupees)")
    plt.title(location)
    plt.legend()

plot_scatter_chart(df7,"Uttarahalli")

"""WE SHOULD ALSO REMOVE PROPERTIES WHERE FOR THE SAME LOCATION, THE PRICE OF (FOR EXAMPLE) A 3 BEDROOM APARTMENT IS LESS THAN A 2 BEDROOM APARTMENT (WITH THE SAME SQUARE FT AREA)..WE CAN REMOVE THOSE 2 BHK APARTMENTS WHOSE PRICE_PER_SQFT IS LESS THAN THE MEAN PRICE_PER_SQFT OF 1 BHK APARTMENT"""

def remove_bhk_outliers(df):
    exclude_indices = np.array([])
    for location, location_df in df.groupby('location'):
        BHK_stats = {}
        for BHK, BHK_df in location_df.groupby('BHK'):
            BHK_stats[BHK] = {
                'mean': np.mean(BHK_df.price_per_sqft),
                'std': np.std(BHK_df.price_per_sqft),
                'count': BHK_df.shape[0]
            }
        for BHK, BHK_df in location_df.groupby('BHK'):
            stats = BHK_stats.get(BHK-1)
            if stats and stats['count']>5:
                exclude_indices = np.append(exclude_indices, BHK_df[BHK_df.price_per_sqft<(stats['mean'])].index.values)
    return df.drop(exclude_indices,axis='index')
df8 = remove_bhk_outliers(df7)
# df8 = df7.copy()
df8.shape

plot_scatter_chart(df8,"Uttarahalli")

import matplotlib
matplotlib.rcParams["figure.figsize"] = (20,10)
plt.hist(df8.price_per_sqft,rwidth=0.8)
plt.xlabel("Price Per Square Feet")
plt.ylabel("Count")

df8.bath.unique()

plt.hist(df8.bath,rwidth=0.8)
plt.xlabel("Number of bathrooms")
plt.ylabel("Count")

df8[df8.bath>10]

#IT IS UNUSUAL TO HAVE 2 MORE BATHROOMS THAN NUMBER OF BEDROOMS IN A HOME

df8[df8.bath>df8.BHK+2]

"""IF WE HAVE A 4 BEDROOM HOME AND EVEN IF WE HAVE A BATHROOM IN ALL 4 ROOMS PLUS ONE GUEST BATHROOM, WE WILL HAVE A TOTAL BATH = TOTAL BED + 1 MAX. ANYTHING ABOVE THAT IS AN OUTLIER OR A DATA ERROR AND CAN BE REMOVED"""

df9 = df8[df8.bath<df8.BHK+2]
df9.shape

df10 = df9.drop(['size','price_per_sqft'],axis='columns')
df10.head(3)

dummies = pd.get_dummies(df10.location)
dummies.head(3)

#use one hot encoding for location
df11 = pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')
df11.head()

df12 = df11.drop('location',axis='columns')
df12.head(2)

# Define the independent and dependent variables
X = df12.drop(['price'],axis='columns')
y = df12.price

# Split the data into training and test sets

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=10)
model = LinearRegression()
model.fit(X_train,y_train)
model.score(X_test,y_test)

cv = ShuffleSplit(n_splits=5, test_size=0.3, random_state=0)

cross_val_score(LinearRegression(), X, y, cv=cv)

from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LinearRegression, Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import ShuffleSplit
import pandas as pd

def find_best_model_using_gridsearchcv(X, y):
    algos = {
        'linear_regression': {
            'model': LinearRegression(),
            'params': {}
        },
        'decision_tree': {
            'model': DecisionTreeRegressor(),
            'params': {
                'criterion': ['mse', 'friedman_mse'],
                'splitter': ['best', 'random']
            }
        }
    }
    scores = []
    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
    for algo_name, config in algos.items():
        gs = GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)
        gs.fit(X, y)
        scores.append({
            'model': algo_name,
            'r2 value': gs.best_score_,
            'best_params': gs.best_params_
        })

    return pd.DataFrame(scores, columns=['model', 'r2 value', 'best_params'])

find_best_model_using_gridsearchcv(X,y)

plt.figure(figsize=(12, 6))

X_all = pd.concat([X_train, X_test])
y_all = pd.concat([y_train,y_test])

# Linear Regression
linear_regression = LinearRegression()
linear_regression.fit(X_all, y_all)
y_pred_linear_regression = linear_regression.predict(X_all)

# Decision Tree
decision_tree = DecisionTreeRegressor()
decision_tree.fit(X_all, y_all)
y_pred_decision_tree = decision_tree.predict(X_all)


plt.scatter(y_all,y_pred_linear_regression);
plt.xlabel('Actual price');
plt.ylabel('Predicted price');

plt.scatter(y_all,y_pred_decision_tree);
plt.xlabel('Actual price ');
plt.ylabel('Predicted price');